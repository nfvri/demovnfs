apiVersion: v1
kind: ConfigMap
metadata:
  name: routes-setup
data:
  routes_setup.sh: | 
    #!/usr/bin/env bash
    # SPDX-License-Identifier: Apache-2.0
    # Copyright(c) 2019 Intel Corporation

    #######
    ## Validated for clx2
    #######

    set -e
    set -x

    apt-get update
    apt-get install gettext-base -y

    envsubst < /conf/upf.json > /opt/bess/bessctl/conf/upf.json

    cp /conf/up4_premium.bess /opt/bess/bessctl/conf/up4_premium.bess
    cp /conf/ports.py /opt/bess/bessctl/conf/ports.py

    # TCP port of bess/web monitor
    gui_port=8000
    bessd_port=10514
    metrics_port=8080

    # Driver options. Choose any one of the three
    #
    # "dpdk" set as default
    # "af_xdp" uses AF_XDP sockets via DPDK's vdev for pkt I/O. This version is non-zc version. ZC version still needs to be evaluated.
    # "af_packet" uses AF_PACKET sockets via DPDK's vdev for pkt I/O.
    # "sim" uses Source() modules to simulate traffic generation
    #mode="dpdk"
    #mode="af_xdp"
    mode="af_packet"
    #mode="sim"

    # Gateway interface(s)
    #
    # In the order of ("s1u" "sgi")
    ifaces=("net0" "net1")

    # Static IP addresses of gateway interface(s) in cidr format
    #
    # In the order of (s1u sgi)
    ipaddrs=(198.18.0.1/30 198.19.0.1/30)

    # MAC addresses of gateway interface(s)
    #
    # In the order of (s1u sgi)
    macaddrs=(9e:b2:d3:34:cc:28 c2:9c:55:d4:8a:1f)

    # Static IP addresses of the neighbors of gateway interface(s)
    #
    # In the order of (n-s1u n-sgi)
    nhipaddrs=(198.18.0.2 198.19.0.2)

    # Static MAC addresses of the neighbors of gateway interface(s)
    # 
    # In the order of (n-s1u n-sgi)
    nhmacaddrs=(22:53:7a:15:58:50 22:53:7a:15:58:50)

    # IPv4 route table entries in cidr format per port
    #
    # In the order of ("{r-s1u}" "{r-sgi}")
    routes=("11.1.1.128/25" "0.0.0.0/0")

    num_ifaces=${#ifaces[@]}
    num_ipaddrs=${#ipaddrs[@]}

    # Set up static route and neighbor table entries of the SPGW
    function setup_trafficgen_routes() {
            for ((i = 0; i < num_ipaddrs; i++)); do
                    ip neighbor add "${nhipaddrs[$i]}" lladdr "${nhmacaddrs[$i]}" dev "${ifaces[$i % num_ifaces]}" || true
                    let let k=$i+100
                    ip route add ${routes[$i]} via "${nhipaddrs[$i]}" metric $k || true
                    # ip route add ${routes[$i]} via "${nhipaddrs[$i]}" dev "${ifaces[$i]}" metric 100 || true
                    # routelist=${routes[$i]}
                    # for route in $routelist; do
                    #         let k=$i+100
                    #         ip route add "$route" via "${nhipaddrs[$i]}" metric $k || true
                    # done
            done
    }

    # Assign IP address(es) of gateway interface(s) within the network namespace
    function setup_addrs() {
            for ((i = 0; i < num_ipaddrs; i++)); do
                    ip addr add "${ipaddrs[$i]}" dev "${ifaces[$i % $num_ifaces]}" || true
            done
    }

    # Set up mirror links to communicate with the kernel
    #
    # These vdev interfaces are used for ARP + ICMP updates.
    # ARP/ICMP requests are sent via the vdev interface to the kernel.
    # ARP/ICMP responses are captured and relayed out of the dpdk ports.
    function setup_mirror_links() {
        for ((i = 0; i < num_ifaces; i++)); do
                ip link add "${ifaces[$i]}"-vdev type veth peer name "${ifaces[$i]}" || true
                #ip link add link "${ifaces[$i]}" type macvlan || true
                ip link set "${ifaces[$i]}" up || true
                ip link set "${ifaces[$i]}-vdev" up || true
                ip link set dev "${ifaces[$i]}" address "${macaddrs[$i]}"
        done
        setup_addrs
    }

    # Set up interfaces in the network namespace. For non-"dpdk" mode(s)
    function move_ifaces() {
            for ((i = 0; i < num_ifaces; i++)); do
                    ip link set "${ifaces[$i]}" promisc off
                    ip link set "${ifaces[$i]}" xdp off
                    ip link set "${ifaces[$i]}" up
                    ip link set "${ifaces[$i]}" address "${macaddrs[$i]}"
                    ip link set "${ifaces[$i]}" promisc on
                    ip link set "${ifaces[$i]}" xdp off
                    #if [ "$mode" == 'af_xdp' ]; then
                    #        sudo ip netns exec pause ethtool --features "${ifaces[$i]}" ntuple off
                    #        sudo ip netns exec pause ethtool --features "${ifaces[$i]}" ntuple on
                    #        sudo ip netns exec pause ethtool -N "${ifaces[$i]}" flow-type udp4 action 0
                    #        sudo ip netns exec pause ethtool -N "${ifaces[$i]}" flow-type tcp4 action 0
                    #        sudo ip netns exec pause ethtool -u "${ifaces[$i]}"
                    #fi
            done
            setup_addrs
    }
    
    case $mode in
    "dpdk" | "sim") setup_mirror_links ;;
    "af_xdp" | "af_packet")
            setup_mirror_links
            #move_ifaces
            # Make sure that kernel does not send back icmp dest unreachable msg(s)
            #sudo ip netns exec pause iptables -I OUTPUT -p icmp --icmp-type port-unreachable -j DROP
            iptables -I OUTPUT -p icmp --icmp-type port-unreachable -j DROP
            ;;
    *) ;;

    esac

    # Setup trafficgen routes
    if [ "$mode" != 'sim' ]; then
            setup_trafficgen_routes
    fi

