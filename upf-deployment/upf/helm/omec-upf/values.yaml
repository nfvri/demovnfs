# Default values for omec-upf.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Configure process namespace sharing for pod
shareProcessNamespace: true

## Service of omec upf
service:
  # -- Specifies the type of service to deploy
  type: NodePort
  # -- Specifies the port of service
  port: 80
  # -- Specifies the nodePort of service if the service type is NodePort
  nodePort: 30020

## Service of omec upf
serviceMetrics:
  # -- Specifies whether the service metrics resource should be created
  create: false
  # -- Specifies the type of service to deploy
  type: ClusterIP
  # -- Specifies the port of service
  port: 8080
  # -- Specifies the nodePort of service if the service type is NodePort
  nodePort: 30022

## Service account for omec-upf to use.
##
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  #
  create: false
  # -- (object) Additional custom annotations for the ServiceAccount
  #
  annotations: {}
  # -- (string) The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  #
  name: ""

## RBAC Configuration
rbac:
  # -- Specifies whether a cluster role binding should be created
  create: false
  # -- The cluster role name
  clusterRole: "cluster-admin"

## Service Monitor Configuration for operated Prometheus
serviceMonitor:
  # -- Specify if service monitor will be created
  create: false
  # -- Specify the namespace for the service monitor
  monitoringNamespace: monitoring
  # -- Specify extra monitoring labels for the service monitor
  monitoringLabels:
    release: k8s-prom
  # -- Specify the time scrape interval
  scrapeInterval: 5s
  # -- Specify the scrape timeout
  scrapeTimeout: 5s

## UPF network configuration
upf:
  # -- (string) Number of workers as string to assign for queue handling on each port
  # num_workers: "4"

  ## s1u network configuration
  s1u:
    # -- (string) s1u gateway interface name
    # iface: net0

    # -- s1u MAC addresses of gateway interface
    mac: 9e:b2:d3:34:cc:28
    # -- s1u ip address
    ip: 198.18.0.1/30
    # -- s1u static ip address of its neighbor of gateway interface
    nhip: 198.18.0.2
    # -- s1u static MAC addresses of the neighbor of gateway interface
    nhmac: 22:53:7a:15:58:50
    # -- s1u IPv4 route table entry in cidr format
    route: 11.1.1.128/25
    # -- s1u pci environment variable name
    pci: PCIDEVICE_INTEL_COM_INTEL_SRIOV_DPDK_B2B_NET1
  ## sgi network configuration
  sgi:
    # -- (string) sgi gateway interface name
    # iface: net1

    # -- sgi MAC addresses of gateway interface
    mac: c2:9c:55:d4:8a:1f
    # -- sgi ip address
    ip: 198.19.0.1/30
    # -- sgi static ip address of its neighbor of gateway interface
    nhip: 198.19.0.2
    # -- sgi static MAC addresses of the neighbor of gateway interface
    nhmac: 22:53:7a:15:58:50
    # -- sgi IPv4 route table entry in cidr format
    route: 0.0.0.0/0
    # -- s1u sgi environment variable name
    pci: PCIDEVICE_INTEL_COM_INTEL_SRIOV_DPDK_B2B_NET2

## Configuration for bessd container
bessd:
  ## Image configuration
  image:
    # -- bessd image repository
    repository: nfvri/upf-epc-8806-bess
    # -- bessd image pull policy
    pullPolicy: IfNotPresent
    # -- bessd image tag
    tag: "0.3.0-dev"

  # -- (array) Override default container command (useful when using custom images or configmaps)
  command: []
  # -- (string) Path of upf conf file. Populates the CONF_FILE env variable of bessd container. Default to /opt/bess/bessctl/conf/upf.json
  # upfConfFile: /opt/bess/bessctl/conf/upf.json

  # -- (object) Security Context Configuration
  securityContext:
    capabilities:
      add:
        - NET_ADMIN
        - IPC_LOCK
  ##  Resources configuration of bessd
  resources:
    # -- The resources requests for the bessd container
    requests:
      cpu: "6000m"
      memory: "2Gi"
      hugepages-1Gi: 4Gi
    #  intel.com/intel_sriov_dpdk_b2b_net1: '1'
    #  intel.com/intel_sriov_dpdk_b2b_net2: '1'
    # -- The resources limits for the bessd container
    limits:
      cpu: "6000m"
      memory: "2Gi"
      hugepages-1Gi: 4Gi
    #  intel.com/intel_sriov_dpdk_b2b_net1: '1'
    #  intel.com/intel_sriov_dpdk_b2b_net2: '1'

  # -- (object) OMEC UPF bessd container's readiness probe
  readinessProbe:
    tcpSocket:
      port: 10514
    initialDelaySeconds: 30
    periodSeconds: 20
  # -- (object) OMEC UPF bessd container's liveness probe
  livenessProbe:
    tcpSocket:
      port: 10514
    initialDelaySeconds: 30
    periodSeconds: 20

  # -- (array) A list of volume mounts to be added to the bessd container
  extraVolumeMounts: []

## Configuration for web container
web:
  ## Image configuration
  image:
    # -- web image repository
    repository: nfvri/upf-epc-8806-bess
    # -- web image pull policy
    pullPolicy: IfNotPresent
    # -- web image tag
    tag: "0.3.0-dev"

  # -- (array) Override default container command (useful when using custom images or configmaps)
  command: []

  # -- (object) OMEC UPF web container's readiness probe
  readinessProbe: {}
  # -- (object) OMEC UPF web container's liveness probe
  livenessProbe: {}
  ##  Resources configuration of web
  resources:
    # -- The resources requests for the web container
    limits:
      cpu: 1000m
      memory: 512Mi

  # -- (array) A list of volume mounts to be added to the web container
  extraVolumeMounts: []

## Configuration for routectl container
routectl:
  ## Image configuration
  image:
    # -- routectl image repository
    repository: nfvri/upf-epc-8806-bess
    # -- routectl image pull policy
    pullPolicy: IfNotPresent
    # -- routectl image tag
    tag: "0.3.0-dev"

  # -- (array) Override default container command (useful when using custom images or configmaps)
  command: []

  # -- (object) Security Context Configuration
  securityContext: {}

  # -- (object) OMEC UPF routectl container's readiness probe
  readinessProbe: {}
  # -- (object) OMEC UPF routectl container's liveness probe
  livenessProbe: {}

  ## Resources configuration of routectl
  resources:
    # -- The resources requests for the routectl container
    limits:
      cpu: 1000m
      memory: 512Mi

  # -- (array) A list of volume mounts to be added to the routectl container
  extraVolumeMounts: []

## Configuration for pfcpiface container
pfcpiface:
  ## Image configuration
  image:
    # -- pfcpiface image repository
    repository: nfvri/upf-epc-8806-pfcpiface
    # -- pfcpiface image pull policy
    pullPolicy: IfNotPresent
    # -- pfcpiface image tag
    tag: "0.3.0-dev"

  # -- (array) Override default container command (useful when using custom images or configmaps)
  command: []

  # -- (object) OMEC UPF pfcpiface container's readiness probe
  readinessProbe: {}
  # -- (object) OMEC UPF pfcpiface container's liveness probe
  livenessProbe: {}
  ## Resources configuration of pfcpiface
  resources:
    # -- The resources requests for the pfcpiface container
    limits:
      cpu: 1000m
      memory: 512Mi

  # -- (array) A list of volume mounts to be added to the pfcpiface container
  extraVolumeMounts: []

# -- (object) Allows you to add any config files in {{ chartName }}-config configmap, such as init_setup.sh bash script
config: {}
  # init_setup.sh: |
  #   #!/usr/bin/env bash
  #   # SPDX-License-Identifier: Apache-2.0
  #   # Copyright(c) 2019 Intel Corporation
  #   #######
  #   ## Validated for clx2
  #   #######
  #   set -e
  #   set -x
  #   apt-get update
  #   apt-get install gettext-base -y
  #   envsubst < /conf/upf.json > /pre-install/upf.json

  #   cp /pre-install/upf.json /opt/bess/bessctl/conf/upf.json
  #   cp /bess-overrides/up4_premium.bess /opt/bess/bessctl/conf/up4_premium.bess
  #   cp /bess-overrides/ports.py /opt/bess/bessctl/conf/ports.py
  #   # TCP port of bess/web monitor
  #   gui_port=8000
  #   bessd_port=10514
  #   metrics_port=8080
  #   # Gateway interface(s)
  #   #
  #   # In the order of ("s1u" "sgi")
  #   ifaces=({{ .Values.upf.s1u.iface | default "net0" | quote }} {{ .Values.upf.sgi.iface | default "net1" | quote }})
  #   # Static IP addresses of gateway interface(s) in cidr format
  #   #
  #   # In the order of (s1u sgi)
  #   ipaddrs=({{ .Values.upf.s1u.ip | default "198.18.0.1/30" }} {{ .Values.upf.sgi.ip | default "198.19.0.1/30" }})
  #   # MAC addresses of gateway interface(s)
  #   #
  #   # In the order of (s1u sgi)
  #   macaddrs=({{ .Values.upf.s1u.mac | default "9e:b2:d3:34:cc:28" }} {{ .Values.upf.sgi.mac | default "c2:9c:55:d4:8a:1f" }})
  #   # Static IP addresses of the neighbors of gateway interface(s)
  #   #
  #   # In the order of (n-s1u n-sgi)
  #   nhipaddrs=({{ .Values.upf.s1u.nhip | default "198.18.0.2" }} {{ .Values.upf.sgi.nhip | default "198.19.0.2" }})
  #   # Static MAC addresses of the neighbors of gateway interface(s)
  #   #
  #   # In the order of (n-s1u n-sgi)
  #   nhmacaddrs=({{ .Values.upf.s1u.nhmac | default "22:53:7a:15:58:50" }} {{ .Values.upf.sgi.nhmac | default "22:53:7a:15:58:50 "}})
  #   # IPv4 route table entries in cidr format per port
  #   #
  #   # In the order of ("{r-s1u}" "{r-sgi}")
  #   routes=({{ .Values.upf.s1u.route | default "11.1.1.128/25" | quote }} {{ .Values.upf.sgi.route | default "0.0.0.0/0" | quote }})
  #   num_ifaces=${#ifaces[@]}
  #   num_ipaddrs=${#ipaddrs[@]}
  #   # Set up static route and neighbor table entries of the SPGW
  #   function setup_trafficgen_routes() {
  #           for ((i = 0; i < num_ipaddrs; i++)); do
  #                   ip neighbor add "${nhipaddrs[$i]}" lladdr "${nhmacaddrs[$i]}" dev "${ifaces[$i % num_ifaces]}" || true
  #                   let k=$i+100
  #                   routelist=${routes[$i]}
  #                   for route in $routelist; do
  #                     ip route add "$route" via "${nhipaddrs[$i]}" metric $k || true
  #                   done
  #           done
  #   }
  #   # Assign IP address(es) of gateway interface(s) within the network namespace
  #   function setup_addrs() {
  #           for ((i = 0; i < num_ipaddrs; i++)); do
  #                   ip addr add "${ipaddrs[$i]}" dev "${ifaces[$i % $num_ifaces]}" || true
  #           done
  #   }
  #   # Set up mirror links to communicate with the kernel
  #   #
  #   # These vdev interfaces are used for ARP + ICMP updates.
  #   # ARP/ICMP requests are sent via the vdev interface to the kernel.
  #   # ARP/ICMP responses are captured and relayed out of the dpdk ports.
  #   function setup_mirror_links() {
  #       for ((i = 0; i < num_ifaces; i++)); do
  #               ip link add "${ifaces[$i]}"-vdev type veth peer name "${ifaces[$i]}" || true
  #               #ip link add link "${ifaces[$i]}" type macvlan || true
  #               ip link set "${ifaces[$i]}" up || true
  #               ip link set "${ifaces[$i]}-vdev" up || true
  #               ip link set dev "${ifaces[$i]}" address "${macaddrs[$i]}"
  #       done
  #       setup_addrs
  #   }
  #   # Set up interfaces in the network namespace. For non-"dpdk" mode(s)
  #   function move_ifaces() {
  #           for ((i = 0; i < num_ifaces; i++)); do
  #                   ip link set "${ifaces[$i]}" promisc off
  #                   ip link set "${ifaces[$i]}" xdp off
  #                   ip link set "${ifaces[$i]}" up
  #                   ip link set "${ifaces[$i]}" address "${macaddrs[$i]}"
  #                   ip link set "${ifaces[$i]}" promisc on
  #                   ip link set "${ifaces[$i]}" xdp off
  #           done
  #           setup_addrs
  #   }
  #   setup_mirror_links
  #   iptables -I OUTPUT -p icmp --icmp-type port-unreachable -j DROP

  #   setup_trafficgen_routes

# -- (object) podAnnotations Map of annotations to add to the pods
podAnnotations: {}
  # k8s.v1.cni.cncf.io/networks: default/sriov-dpdk-b2b-net1,default/sriov-dpdk-b2b-net2

# -- (object) Node labels for omec-upf pods assignment
nodeSelector: {}
 # kubernetes.io/hostname: "clx2"

# -- (array) Tolerations for omec-upf pods assignment
tolerations: []

# -- (object)  Affinity for omec-upf pods assignment
affinity: {}

# -- (array) A list of volumes to be added to the pod
extraVolumes: []
