{{- $root := . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "omec-upf.fullname" . }}-config
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
  labels:
    {{- include "omec-upf.labels" . | nindent 4 }}
data:
  {{- if .Values.config }}
  {{- range $configName, $configYaml := .Values.config }}
  {{ $configName }}: |
    {{- if (eq (kindOf $configYaml) "map")}}
    {{-   tpl (toYaml $configYaml) $root | nindent 4 }}
    {{- else -}}
    {{-   tpl $configYaml $root | nindent 4 }}
    {{- end -}}
  {{- end -}}
  {{- else }}
  init_setup.sh: | 
    #!/usr/bin/env bash

    set -e
    set -x

    apt-get update
    apt-get install gettext-base -y

    envsubst < /conf/upf.json > /pre-install/upf.json
    
    cp /pre-install/upf.json /opt/bess/bessctl/conf/upf.json
    cp /bess-overrides/up4_premium.bess /opt/bess/bessctl/conf/up4_premium.bess
    cp /bess-overrides/ports.py /opt/bess/bessctl/conf/ports.py

    # TCP port of bess/web monitor
    gui_port=8000
    bessd_port=10514
    metrics_port=8080
    
    # Gateway interface(s)
    #
    # In the order of ("s1u" "sgi")
    ifaces=({{ .Values.upf.s1u.iface | default "net0" | quote }} {{ .Values.upf.sgi.iface | default "net1" | quote }})
    
    # Static IP addresses of gateway interface(s) in cidr format
    #
    # In the order of (s1u sgi)
    ipaddrs=({{ .Values.upf.s1u.ip | default "198.18.0.1/30" }} {{ .Values.upf.sgi.ip | default "198.19.0.1/30" }})
    
    # MAC addresses of gateway interface(s)
    #
    # In the order of (s1u sgi)
    macaddrs=({{ .Values.upf.s1u.mac | default "9e:b2:d3:34:cc:28" }} {{ .Values.upf.sgi.mac | default "c2:9c:55:d4:8a:1f" }})
    
    # Static IP addresses of the neighbors of gateway interface(s)
    #
    # In the order of (n-s1u n-sgi)
    nhipaddrs=({{ .Values.upf.s1u.nhip | default "198.18.0.2" }} {{ .Values.upf.sgi.nhip | default "198.19.0.2" }})
    
    # Static MAC addresses of the neighbors of gateway interface(s)
    # 
    # In the order of (n-s1u n-sgi)
    nhmacaddrs=({{ .Values.upf.s1u.nhmac | default "22:53:7a:15:58:50" }} {{ .Values.upf.sgi.nhmac | default "22:53:7a:15:58:50 "}})
    
    # IPv4 route table entries in cidr format per port
    #
    # In the order of ("{r-s1u}" "{r-sgi}")
    routes=({{ .Values.upf.s1u.route | default "11.1.1.128/25" | quote }} {{ .Values.upf.sgi.route | default "0.0.0.0/0" | quote }})
    num_ifaces=${#ifaces[@]}
    num_ipaddrs=${#ipaddrs[@]}
    
    # Set up static route and neighbor table entries of the SPGW
    function setup_trafficgen_routes() {
            for ((i = 0; i < num_ipaddrs; i++)); do
                    ip neighbor add "${nhipaddrs[$i]}" lladdr "${nhmacaddrs[$i]}" dev "${ifaces[$i % num_ifaces]}" || true
                    let k=$i+100
                    routelist=${routes[$i]}
                    for route in $routelist; do
                      ip route add "$route" via "${nhipaddrs[$i]}" metric $k || true
                    done
            done
    }
    
    # Assign IP address(es) of gateway interface(s) within the network namespace
    function setup_addrs() {
            for ((i = 0; i < num_ipaddrs; i++)); do
                    ip addr add "${ipaddrs[$i]}" dev "${ifaces[$i % $num_ifaces]}" || true
            done
    }
   
    # Set up mirror links to communicate with the kernel
    #
    # These vdev interfaces are used for ARP + ICMP updates.
    # ARP/ICMP requests are sent via the vdev interface to the kernel.
    # ARP/ICMP responses are captured and relayed out of the dpdk ports.
    function setup_mirror_links() {
        for ((i = 0; i < num_ifaces; i++)); do
                ip link add "${ifaces[$i]}"-vdev type veth peer name "${ifaces[$i]}" || true
                #ip link add link "${ifaces[$i]}" type macvlan || true
                ip link set "${ifaces[$i]}" up || true
                ip link set "${ifaces[$i]}-vdev" up || true
                ip link set dev "${ifaces[$i]}" address "${macaddrs[$i]}"
        done
        setup_addrs
    }
   
    # Set up interfaces in the network namespace. For non-"dpdk" mode(s)
    function move_ifaces() {
            for ((i = 0; i < num_ifaces; i++)); do
                    ip link set "${ifaces[$i]}" promisc off
                    ip link set "${ifaces[$i]}" xdp off
                    ip link set "${ifaces[$i]}" up
                    ip link set "${ifaces[$i]}" address "${macaddrs[$i]}"
                    ip link set "${ifaces[$i]}" promisc on
                    ip link set "${ifaces[$i]}" xdp off
            done
            setup_addrs
    }
   
    setup_mirror_links
    iptables -I OUTPUT -p icmp --icmp-type port-unreachable -j DROP
    
    setup_trafficgen_routes

  {{- end -}}
