apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "pktgen.fullname" . }}-core-weekly
  labels:
  {{ include "pktgen.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
data:  
  pktgen-premium-core-weekly.bess: |
    """
    Core traffic (n6 receive) for the premium upf
    """

    import conf.sim as sim
    import os
    import time
    import psutil

    def get_process_affinity():
        return psutil.Process().cpu_affinity()

    def lines_from(file):
        lines = []
        fp = open(file, "r")
        line = fp.readline()
        while line:
            lines.append(float(line.split("\n")[0]))
            line = fp.readline()
        fp.close()
        return lines

    pkt_size = 1500
    flows = 100
    #workers=[10,12]
    #workers=[3,4]
    traffic_pattern_file = "./conf/patterns/example-large-traffic-rate-pattern.txt"
    time_step = 10 #secs
    max_load = 13000000000
    
    #flow create 1 ingress pattern eth / ipv4 / end actions rss types ipv4 l3-dst-only end key_len 0 queues end / end
    n6_pkts = [sim.gen_inet_packet(pkt_size, "22:53:7a:15:58:50", "{{ .Values.upf.sgi }}", "6.6.6.6", "16.0.0.1"),]

    # for wid in range(len(workers)):
    #    bess.add_worker(wid=wid, core=int(workers[wid]))

    # ====================================================
    #       Core Setup
    # ====================================================


    # Initialize workers
    cores = get_process_affinity()
    workers = cores[:2]

    # set_process_affinity_all(nonworkers)
    for wid in range(len(workers)):
        bess.add_worker(wid=wid, core=int(workers[wid % len(workers)]))
    
    num_q = len(workers)
    kwargs = {'num_inc_q': num_q,
              'num_out_q': num_q}
    p = PMDPort(port_id=0, **kwargs)

    n6seq_kwargs = sim.gen_inet_sequpdate_args(flows, "16.0.0.1")

    src6::Source(pkt_size=pkt_size) -> Rewrite(templates=n6_pkts) -> n6update::SequentialUpdate(**n6seq_kwargs) -> L4Checksum() -> IPChecksum() -> QueueOut(port=p.name, qid=1)

    if not os.path.exists(traffic_pattern_file):
        print(f"Traffic pattern file {traffic_pattern_file} does not exist!")
        exit(1)

    lines = lines_from(traffic_pattern_file)

    if len(lines) < 1:
        print("The traffic pattern file should contain at least one traffic step.")
        exit(1)

    max_file_load = max(lines)
    bess.add_tc('6_limit', wid=1, policy='rate_limit', resource='bit', limit={'bit': int(lines[0])})
    src6.attach_task(parent='6_limit')

    while 1:
        for day in range(0,7):
            if day > 1:
                max_daily_load = max_load / 2
            else:
                max_daily_load = max_load

            for line in lines:
                load = (line * max_daily_load) / max_file_load
                print(f"Setting current load (bits): {int(load)}")
        
                bess.update_tc_params('6_limit', resource='bit', limit={'bit': int(load)})
                bess.resume_all()
                time.sleep(time_step)
