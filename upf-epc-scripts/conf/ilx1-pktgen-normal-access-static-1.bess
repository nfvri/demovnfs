"""
    Static access traffic (n3 receive) for normal upf
"""

import conf.sim as sim

pkt_size = 1500
flows = 100
workers=[15,47,11,43]

# flow create 0 ingress pattern eth / ipv4 / udp / gtpu / ipv4 / end actions rss types ipv4 l3-src-only end key_len 0 queues end / end
#n39_pkts = [sim.gen_gtpu_packet(pkt_size, "22:53:7a:15:58:50", "9e:b2:d3:34:ab:27", "11.1.1.129", "198.18.0.1", "16.0.0.1", "9.9.9.9", 0x30000000),]
n36_pkts = [sim.gen_gtpu_packet(pkt_size, "22:53:7a:15:58:51", "d2:9c:55:d4:8a:f8", "11.1.1.129", "198.18.0.1", "16.0.0.1", "6.6.6.6", 0x30000000),]

# flow create 1 ingress pattern eth / ipv4 / udp / gtpu / ipv4 / end actions rss types ipv4 l3-dst-only end key_len 0 queues end / end
#n9_pkts = [sim.gen_gtpu_packet(pkt_size, "22:53:7a:15:58:50", "c2:9c:55:d4:8a:f6", "13.1.1.199", "198.19.0.1", "9.9.9.9", "16.0.0.1", 0x90000000),]

#flow create 1 ingress pattern eth / ipv4 / end actions rss types ipv4 l3-dst-only end key_len 0 queues end / end
#n6_pkts = [sim.gen_inet_packet(pkt_size, "22:53:7a:15:58:50", "c2:9c:55:d4:8a:f6", "6.6.6.6", "16.0.0.1"),]

for wid in range(len(workers)):
    bess.add_worker(wid=wid, core=int(workers[wid % len(workers)]))

num_q = len(workers)
kwargs = {'num_inc_q': num_q,
          'num_out_q': num_q}
p = PMDPort(port_id=0, **kwargs)

n3seq_kwargs = sim.gen_gtpu_sequpdate_args(flows, "16.0.0.1", 62, 0x30000000)
#n9seq_kwargs = sim.gen_gtpu_sequpdate_args(flows, "16.0.0.1", 66, 0x90000000)
#n6seq_kwargs = sim.gen_inet_sequpdate_args(flows, "16.0.0.1")

# 25 Gbps each to saturate 100 Gbps
#bess.add_tc('39_limit', wid=0, policy='rate_limit', resource='bit', limit={'bit': 25000000000})
bess.add_tc('36_limit', wid=0, policy='rate_limit', resource='bit', limit={'bit': 1499999999})
#bess.add_tc('6_limit',  wid=1, policy='rate_limit', resource='bit', limit={'bit': 25000000000})
#bess.add_tc('9_limit',  wid=1, policy='rate_limit', resource='bit', limit={'bit': 25000000000})

#src39::Source(pkt_size=pkt_size) -> Rewrite(templates=n39_pkts) -> n39update::SequentialUpdate(**n3seq_kwargs) -> L4Checksum() -> IPChecksum() -> QueueOut(port=p.name, qid=0)
src36::Source(pkt_size=pkt_size) -> Rewrite(templates=n36_pkts) -> n36update::SequentialUpdate(**n3seq_kwargs) -> L4Checksum() -> IPChecksum() -> QueueOut(port=p.name, qid=1)

#src9::Source(pkt_size=pkt_size) -> Rewrite(templates=n9_pkts) -> n9update::SequentialUpdate(**n9seq_kwargs) -> L4Checksum() -> IPChecksum() -> QueueOut(port=p.name, qid=2)
#src6::Source(pkt_size=pkt_size) -> Rewrite(templates=n6_pkts) -> n6update::SequentialUpdate(**n6seq_kwargs) -> L4Checksum() -> IPChecksum() -> QueueOut(port=p.name, qid=3)

#src39.attach_task(parent='39_limit')
src36.attach_task(parent='36_limit')

#src9.attach_task(parent='9_limit')
#src6.attach_task(parent='6_limit')
