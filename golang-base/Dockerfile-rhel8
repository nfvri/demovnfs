FROM registry.access.redhat.com/ubi8/ubi:latest

ENV TF_VER "2.4.4"
ENV Z3LIB_VER "4.8.10"
ENV LIBFFI_VER "3.3"
ENV PROTOC_VER "3.12.4"
ENV GRPC_WEB_VER "1.2.1"
ENV CCPUS 8

### Required OpenShift Labels
LABEL name="golang" \
      maintainer="angelouev@intracom-telecom.com" \
      vendor="Intracom Telecom" \
      version="rhel8-1.18.3" \
      release="1" \
      summary="A builder image for golang-based, AI apps." \
      description="A builder image for golang-based, AI apps."

COPY licenses /licenses

# Update system
RUN dnf -y update-minimal --disableplugin=subscription-manager --setopt=tsflags=nodocs \
		--security --sec-severity=Important --sec-severity=Critical

# Clang and LLVM version 11 is in RHEL8.4
RUN REPOLIST=rhel-8-for-x86_64-appstream-rpms,rhel-8-for-x86_64-baseos-rpms \
	INSTALL_PKGS="llvm-libs llvm-devel llvm clang clang-libs clang-devel clang-tools-extra" && \
	dnf -y install --disablerepo "*" --enablerepo ${REPOLIST} --setopt=tsflags=nodocs --releasever 8.4 ${INSTALL_PKGS} && \
	dnf -y install python3-dnf-plugin-versionlock && \
	dnf versionlock ${INSTALL_PKGS} && \
	dnf clean all

### Add necessary Red Hat UBI and RHEL repos here
RUN REPOLIST=ubi-8-baseos-rpms,ubi-8-appstream-rpms,codeready-builder-for-rhel-8-x86_64-rpms,rhel-8-for-x86_64-appstream-rpms,rhel-8-for-x86_64-baseos-rpms \
	INSTALL_PKGS="git make gcc libvirt-devel kernel-headers cmake ncurses-devel libbpf libbpf-devel ncurses-libs bpftool python3 swig python3-numpy curl gnupg ipmitool unzip" && \
	dnf -y install --disablerepo "*" --enablerepo ${REPOLIST} --setopt=tsflags=nodocs ${INSTALL_PKGS} && \
	dnf clean all

# Compile and install bcc
RUN git clone --depth 1 https://github.com/iovisor/bcc.git && \
	mkdir ./bcc/build && \
	cd ./bcc/build && \
	cmake3 .. && \
	make -j${CCPUS} && \
	make install && \
	cd / && \
	rm -rf /bcc

# Get Go
ENV GOLANG_VERSION 1.18.3
ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 956f8507b302ab0bb747613695cdae10af99bbd39a90cae522b7c0302cc27245

RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
	&& echo "$GOLANG_DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
	&& tar -C /usr/local -xzf golang.tar.gz \
	&& rm golang.tar.gz

# Install bazel
RUN dnf config-manager --add-repo https://copr.fedorainfracloud.org/coprs/vbatts/bazel/repo/epel-8/vbatts-bazel-epel-8.repo \
	&& dnf -y install bazel

# Install protobuf
RUN export PROTOC_ZIP=protoc-${PROTOC_VER}-linux-x86_64.zip && \
	curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VER}/${PROTOC_ZIP} && \
	unzip -o ${PROTOC_ZIP} -d ./proto && \
	chmod 755 -R ./proto/bin && \
	export BASE=/usr && \
	# Copy into path
	cp ./proto/bin/protoc ${BASE}/bin/ && \
	cp -R ./proto/include/* ${BASE}/include/ && \
	rm -rf ./proto && \
	rm ${PROTOC_ZIP}

# Download protoc-gen-grpc-web
RUN export GRPC_WEB=protoc-gen-grpc-web-${GRPC_WEB_VER}-linux-x86_64 && \
	GRPC_WEB_PATH=/usr/bin/protoc-gen-grpc-web && \
	curl -OL https://github.com/grpc/grpc-web/releases/download/${GRPC_WEB_VER}/${GRPC_WEB} && \
	# Copy into path
	mv ${GRPC_WEB} ${GRPC_WEB_PATH} && \
	chmod +x ${GRPC_WEB_PATH}

# Install tensorflow C libs
RUN mkdir -p /tensorflow && \
	curl -fsLo /tensorflow/libtensorflow-cpu-linux-x86_64-${TF_VER}.tar.gz  https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-${TF_VER}.tar.gz && \
	cd /tensorflow && \
	tar -C /usr/local/ -xzf libtensorflow-cpu-linux-x86_64-${TF_VER}.tar.gz && \
	ldconfig && \
	rm -rf /tensorflow

# Install libffi
RUN curl -fsLo libffi-${LIBFFI_VER}.tar.gz https://github.com/libffi/libffi/releases/download/v${LIBFFI_VER}/libffi-${LIBFFI_VER}.tar.gz && \
	tar xvf libffi-${LIBFFI_VER}.tar.gz && \
	cd libffi-${LIBFFI_VER} && \
	./configure --disable-docs && \
	make -j${CCPUS} && \
	make install && \
	cd .. && \
	rm libffi-${LIBFFI_VER}.tar.gz && \
	rm -rf libffi-${LIBFFI_VER}

# Install z3
RUN curl -fsLo z3-${Z3LIB_VER}.tar.gz https://github.com/Z3Prover/z3/archive/refs/tags/z3-${Z3LIB_VER}.tar.gz && \
	tar xvf z3-${Z3LIB_VER}.tar.gz && \
	mkdir -p z3-z3-${Z3LIB_VER}/build && \
	cd z3-z3-${Z3LIB_VER}/build && \
	cmake -G "Unix Makefiles" \
		-DZ3_BUILD_EXECUTABLE=FALSE \
		-DZ3_BUILD_TEST_EXECUTABLES=FALSE \
		-DZ3_BUILD_JAVA_BINDINGS=FALSE \
		-DZ3_BUILD_DOTNET_BINDINGS=FALSE \
		-DZ3_ENABLE_EXAMPLE_TARGETS=FALSE \
		-DZ3_BUILD_DOCUMENTATION=FALSE \
		-DZ3_ALWAYS_BUILD_DOCS=FALSE \
		-DZ3_BUILD_LIBZ3_SHARED=TRUE \
		-DCMAKE_BUILD_TYPE=Release ../ && \
	make -j${CCPUS} && \
	make install && \
	cd ../.. && \
	rm z3-${Z3LIB_VER}.tar.gz && \
	rm -rf z3-z3-${Z3LIB_VER}

# Replicate paths from Go image
ENV GOPATH /go
ENV PATH $GOPATH/bin:$PATH
ENV PATH /usr/local/go/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/lib
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"
WORKDIR $GOPATH
